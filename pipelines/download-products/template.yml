#@ load("@ytt:data", "data")
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
#@ for product in data.values.products:
- name: #@ product.name
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: #@ product.slug
    product_version: #@ product.version
    sort_by: semver

- name: #@ product.name + "-product-bucket"
  type: s3
  source:
    endpoint: ((s3_endpoint))
    bucket: #@ product.s3_bucket
    regexp: #@ product.s3_product_regex
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: ((s3_disable_ssl))

#@ if product.has_stemcell == True:
- name: #@ product.name + "-stemcell"
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: #@ product.stemcell_slug
    product_version: #@ product.stemcell_version
    sort_by: semver

- name: #@ product.name + "-stemcells"
  type: s3
  source:
    endpoint: ((s3_endpoint))
    bucket: #@ product.s3_bucket
    regexp: stemcells/((s3_stemcells_regex))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: ((s3_disable_ssl))
#@ end
#@ end

jobs:
#@ for product in data.values.products:
- name: #@ product.name
  plan:
  - in_parallel:
    - get: product
      resource: #@ product.name
      trigger: true
      params:
        globs:
        - #@ product.glob

  - put: #@ product.name + "-product-bucket"
    params:
      file: #@ "product/" + product.glob

#@ if product.has_stemcell == True:
- name: #@ product.name + "-stemcell"
  plan:
  - in_parallel:
    - get: stemcells
      resource: #@ product.name + "-stemcell"
      trigger: true
      params:
        globs:
        - #@ product.s3_glob
    - get: product
      resource: #@ product.name
      params:
        globs: []
      passed:
      - #@ product.name

  - put: #@ product.name + "-stemcells"
    params:
      file: stemcells/*.tgz
#@ end
#@ end
