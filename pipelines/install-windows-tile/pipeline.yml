resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource

resources:
- name: schedule
  type: time
  source:
    interval: 24h
    start: "12:00 AM"
    stop: "11:59 PM"
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]

- name: om-cli
  type: github-release
  source:
    user: pivotal-cf
    repository: om
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: pivnet-cli
  type: github-release
  source:
    user: pivotal-cf
    repository: pivnet-cli
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: jq
  type: github-release
  source:
    user: stedolan
    repository: jq
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: tile-config-convertor
  type: github-release
  source:
    user: rahul-kj
    repository: tile-config-convertor
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: secrets-repo
  type: git
  source:
    uri: ((secrets_git_url))
    branch: ((git_branch))
    username: ((git_username))
    password: ((git_token))

- name: automation-repo
  type: git
  source:
    uri: ((automation_git_url))
    branch: ((git_branch))
    username: ((git_username))
    password: ((git_token))

- name: platform-automation-image
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((product_slug))
    product_version: ((product_version))

- name: replicator
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((product_slug))
    product_version: ((product_version))

- name: winfs-injector
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((product_slug))
    product_version: ((product_version))

- name: stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((stemcell_slug))
    product_version: ((stemcell_version))

- name: platform-automation-tasks
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: email
  type: email
  source:
    smtp:
      host: ((smtp_address))
      port: ((smtp_port))
      username: ((smtp_username))
      password: ((smtp_password))
    from: ((from_address))
    to: [((to_addresses))]

credhub-interpolate: &credhub-interpolate-env
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: secrets-repo
  output_mapping:
    interpolated-files: env
  params:
    PREFIX: ((credhub_prefix))
    CREDHUB_CA_CERT: ((credhub_server_ca.certificate))
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_client_secret))
    CREDHUB_SERVER: ((credhub_server))
    INTERPOLATION_PATH: ((opsman_env_path))

credhub-interpolate: &credhub-interpolate-config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: secrets-repo
  output_mapping:
    interpolated-files: config
  params:
    PREFIX: ((credhub_prefix))
    CREDHUB_CA_CERT: ((credhub_server_ca.certificate))
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_client_secret))
    CREDHUB_SERVER: ((credhub_server))
    INTERPOLATION_PATH: ((product_config_path))

cli-params: &cli-params
  params:
    globs:
    - "*linux*64*"

jobs:
- name: scheduler
  plan:
  - get: schedule
    trigger: true
  - get: product
    params:
      globs: []

- name: replicate-inject-upload-and-stage-product
  serial: true
  plan:
  - aggregate:
    - get: secrets-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: product
      params:
        globs: [((product_glob))]
      passed: [scheduler]
      trigger: true
    - get: stemcell
      params:
        globs: [((stemcell_glob))]
    - get: replicator
      params:
        globs: [((replicator_glob))]
        unpack: true
    - get: winfs-injector
      params:
        globs: [((winfs_injector_glob))]
        unpack: true
    - get: jq
      <<: *cli-params
    - get: pivnet-cli
      <<: *cli-params
    - get: om-cli
      <<: *cli-params

  - task: replicate-tile
    image: platform-automation-image
    file: secrets-repo/tasks/replicate-tile/task.yml
    input_mapping:
      product: product
    output_mapping:
      output-folder: replicated-folder
    params:
      DEBUG: ((debug))
      REPLICATED_NAME: ((replicated_name))

  - task: inject-winfs
    image: platform-automation-image
    file: secrets-repo/tasks/inject-winfs/task.yml
    input_mapping:
      product: replicated-folder
    output_mapping:
      output-folder: injected-folder
    params:
      DEBUG: ((debug))

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: upload-and-stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: injected-folder
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))

  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))

- name: generate-config
  plan:
  - aggregate:
    - get: automation-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
      passed: [replicate-inject-upload-and-stage-product]
    - get: platform-automation-tasks
      params:
        globs: ["*.tgz"]
        unpack: true
      passed: [replicate-inject-upload-and-stage-product]
    - get: secrets-repo
      passed: [replicate-inject-upload-and-stage-product]
    - get: pivnet-product
      resource: product
      params:
        globs: []
      passed: [replicate-inject-upload-and-stage-product]
    - get: om-cli
      <<: *cli-params
    - get: jq
      <<: *cli-params
      passed: [replicate-inject-upload-and-stage-product]
    - get: tile-config-convertor
      <<: *cli-params

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: generate-config
    image: platform-automation-image
    file: automation-repo/tasks/generate-config/task.yml
    input_mapping:
      env: env
    params:
      DEBUG: ((debug))
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      PRODUCT_NAME: ((product_identifier))

- name: configure-product
  serial: true
  plan:
  - aggregate:
    - get: secrets-repo
      passed: [replicate-inject-upload-and-stage-product]
    - get: platform-automation-image
      passed: [replicate-inject-upload-and-stage-product]
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
      passed: [replicate-inject-upload-and-stage-product]
    - get: product
      params:
        globs: []
      trigger: true
      passed: [replicate-inject-upload-and-stage-product]

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: create-product-config-file
    <<: *create-yml
    output_mapping:
      output-folder: config
    params:
      DEBUG: ((debug))
      OUTPUT_FILE_NAME: product-config.yml
      PARAM_NAME: ((product_config))

  - task: config-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: env
    params:
      CONFIG_FILE: ((product_config_path))/((product_config_filename))
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))

- name: deploy-product
  serial: true
  plan:
  - aggregate:
    - get: secrets-repo
      passed: [configure-product]
    - get: platform-automation-image
      passed: [configure-product]
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
      passed: [configure-product]
    - get: product
      params:
        globs: []
      trigger: true
      passed: [configure-product]

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: deploy-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))

  - put: email
    params:
      subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_NAME}"
      body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
