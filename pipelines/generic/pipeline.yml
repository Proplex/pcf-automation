resource_types:
- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource
resources:
- name: schedule
  type: time
  source:
    interval: 24h
    start: 12:00 AM
    stop: 11:59 PM
    location: America/Los_Angeles
    days:
    - Sunday
    - Monday
    - Tuesday
    - Wednesday
    - Thursday
    - Friday
    - Saturday
- name: tile-config-convertor
  type: github-release
  source:
    user: rahulkj
    repository: tile-config-convertor
    access_token: ((git_token))
- name: config-repo
  type: git
  source:
    uri: ((config_repo_git_url))
    branch: ((git_branch))
    username: ((git_username))
    password: ((git_token))
- name: automation-repo
  type: git
  source:
    uri: ((automation_git_url))
    branch: ((git_branch))
    username: ((git_username))
    password: ((git_token))
- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3_endpoint))
    bucket: ((s3_automation_bucket))
    regexp: ((s3_automation_image_regex))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: true
- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3_endpoint))
    bucket: ((s3_automation_bucket))
    regexp: ((s3_automation_tasks_regex))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: true
- name: custom-docker-image
  type: docker-image
  source:
    repository: rjain/buildbox
- name: locks
  type: pool
  source:
    pool: ((pipeline_lock_folder))
    uri: ((locks_repo_git_url))
    branch: ((git_branch))
    username: ((git_username))
    password: ((git_token))
- name: email
  type: email
  source:
    smtp:
      host: ((smtp_address))
      port: ((smtp_port))
      username: ((smtp_username))
      password: ((smtp_password))
    from: ((from_address))
    to:
    - ((to_addresses))
- name: pas
  type: s3
  source:
    endpoint: ((s3_endpoint))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: ((s3_disable_ssl))
    bucket: ((s3_pas_bucket))
    regexp: (.*).pivotal
- name: pas-stemcells
  type: s3
  source:
    endpoint: ((s3_endpoint))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: ((s3_disable_ssl))
    bucket: ((s3_pas_bucket))
    regexp: (.*).pivotal
- name: pks
  type: s3
  source:
    endpoint: ((s3_endpoint))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: ((s3_disable_ssl))
    bucket: ((s3_pks_bucket))
    regexp: (.*).pivotal
- name: pks-stemcells
  type: s3
  source:
    endpoint: ((s3_endpoint))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: ((s3_disable_ssl))
    bucket: ((s3_pks_bucket))
    regexp: (.*).pivotal
- name: harbor
  type: s3
  source:
    endpoint: ((s3_endpoint))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: ((s3_disable_ssl))
    bucket: ((s3_harbor_bucket))
    regexp: (.*).pivotal
- name: harbor-stemcells
  type: s3
  source:
    endpoint: ((s3_endpoint))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: ((s3_disable_ssl))
    bucket: ((s3_harbor_bucket))
    regexp: (.*).pivotal
jobs:
- name: scheduler
  plan:
  - get: schedule
    trigger: true
  - get: pas
    resource: pas
    params:
      skip_download: "true"
  - get: pks
    resource: pks
    params:
      skip_download: "true"
  - get: harbor
    resource: harbor
    params:
      skip_download: "true"
- name: set-lock-pas
  plan:
  - get: pas
    resource: pas
    passed:
    - scheduler
    trigger: true
    params:
      skip_download: "true"
  - put: locks
    params:
      acquire: true
- name: upload-and-stage-pas
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: automation-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: pas
      passed:
      - set-lock-pas
      trigger: true
    - get: pas-stemcells
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - in_parallel:
    - task: upload-and-stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: product
        env: env
      params:
        ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      stemcell: stemcells
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
- name: generate-config-pas
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: automation-repo
    - get: config-repo
    - get: pivnet-product
      resource: pas
      passed:
      - upload-and-stage-pas
      params:
        skip_download: "true"
    - get: tile-config-convertor
      params:
        globs:
        - '*linux*64*'
    - get: custom-docker-image
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - task: generate-config
    image: custom-docker-image
    file: automation-repo/tasks/generate-config/task.yml
    input_mapping:
      git-repo: automation-repo
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      PRODUCT_NAME: ((pas_product_identifier))
- name: configure-pas
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: pas
      trigger: true
      passed:
      - upload-and-stage-pas
      params:
        skip_download: "true"
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - task: create-product-var-files
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: vars
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((product_vars_path))
      SKIP_MISSING: true
  - task: config-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-repo
      env: env
      vars: vars
    params:
      CONFIG_FILE: ((pas_product_config_path))/((pas_product_config_filename))
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      VARS_FILES: ((vars_folder))/((pas_product_vars_path))/((pas_product_var_filename))
- name: deploy-pas
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: automation-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: pas
      trigger: true
      passed:
      - configure-pas
      params:
        skip_download: "true"
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - task: deploy-product
    file: automation-repo/tasks/apply-changes.yml
    input_mapping:
      env: env
      config: config-repo
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      APPLY_CHANGES_CONFIG: ((pas_config_path))/((apply_changes_config_filename))
    attempts: ((attempts))
  - put: email
    params:
      subject_text: 'Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}'
      body_text: 'Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}'
- name: release-lock-pas
  plan:
  - in_parallel:
    - get: locks
    - get: product
      resource: pas
      passed:
      - deploy-pas
      trigger: true
      params:
        skip_download: "true"
  - put: locks
    params:
      release: locks
- name: set-lock-pks
  plan:
  - get: pks
    resource: pks
    passed:
    - scheduler
    trigger: true
    params:
      skip_download: "true"
  - put: locks
    params:
      acquire: true
- name: upload-and-stage-pks
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: automation-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: pks
      passed:
      - set-lock-pks
      trigger: true
    - get: pks-stemcells
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - in_parallel:
    - task: upload-and-stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: product
        env: env
      params:
        ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      stemcell: stemcells
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
- name: generate-config-pks
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: automation-repo
    - get: config-repo
    - get: pivnet-product
      resource: pks
      passed:
      - upload-and-stage-pks
      params:
        skip_download: "true"
    - get: tile-config-convertor
      params:
        globs:
        - '*linux*64*'
    - get: custom-docker-image
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - task: generate-config
    image: custom-docker-image
    file: automation-repo/tasks/generate-config/task.yml
    input_mapping:
      git-repo: automation-repo
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      PRODUCT_NAME: ((pks_product_identifier))
- name: configure-pks
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: pks
      trigger: true
      passed:
      - upload-and-stage-pks
      params:
        skip_download: "true"
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - task: create-product-var-files
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: vars
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((product_vars_path))
      SKIP_MISSING: true
  - task: config-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-repo
      env: env
      vars: vars
    params:
      CONFIG_FILE: ((pks_product_config_path))/((pks_product_config_filename))
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      VARS_FILES: ((vars_folder))/((pks_product_vars_path))/((pks_product_var_filename))
- name: deploy-pks
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: automation-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: pks
      trigger: true
      passed:
      - configure-pks
      params:
        skip_download: "true"
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - task: deploy-product
    file: automation-repo/tasks/apply-changes.yml
    input_mapping:
      env: env
      config: config-repo
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      APPLY_CHANGES_CONFIG: ((pks_config_path))/((apply_changes_config_filename))
    attempts: ((attempts))
  - put: email
    params:
      subject_text: 'Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}'
      body_text: 'Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}'
- name: release-lock-pks
  plan:
  - in_parallel:
    - get: locks
    - get: product
      resource: pks
      passed:
      - deploy-pks
      trigger: true
      params:
        skip_download: "true"
  - put: locks
    params:
      release: locks
- name: set-lock-harbor
  plan:
  - get: harbor
    resource: harbor
    passed:
    - scheduler
    trigger: true
    params:
      skip_download: "true"
  - put: locks
    params:
      acquire: true
- name: upload-and-stage-harbor
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: automation-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: harbor
      passed:
      - set-lock-harbor
      trigger: true
    - get: harbor-stemcells
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - in_parallel:
    - task: upload-and-stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: product
        env: env
      params:
        ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      stemcell: stemcells
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
- name: generate-config-harbor
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: automation-repo
    - get: config-repo
    - get: pivnet-product
      resource: harbor
      passed:
      - upload-and-stage-harbor
      params:
        skip_download: "true"
    - get: tile-config-convertor
      params:
        globs:
        - '*linux*64*'
    - get: custom-docker-image
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - task: generate-config
    image: custom-docker-image
    file: automation-repo/tasks/generate-config/task.yml
    input_mapping:
      git-repo: automation-repo
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      PRODUCT_NAME: ((harbor_product_identifier))
- name: configure-harbor
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: harbor
      trigger: true
      passed:
      - upload-and-stage-harbor
      params:
        skip_download: "true"
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - task: create-product-var-files
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: vars
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((product_vars_path))
      SKIP_MISSING: true
  - task: config-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-repo
      env: env
      vars: vars
    params:
      CONFIG_FILE: ((harbor_product_config_path))/((harbor_product_config_filename))
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      VARS_FILES: ((vars_folder))/((harbor_product_vars_path))/((harbor_product_var_filename))
- name: deploy-harbor
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: automation-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: harbor
      trigger: true
      passed:
      - configure-harbor
      params:
        skip_download: "true"
  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
  - task: deploy-product
    file: automation-repo/tasks/apply-changes.yml
    input_mapping:
      env: env
      config: config-repo
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      APPLY_CHANGES_CONFIG: ((harbor_config_path))/((apply_changes_config_filename))
    attempts: ((attempts))
  - put: email
    params:
      subject_text: 'Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}'
      body_text: 'Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}'
- name: release-lock-harbor
  plan:
  - in_parallel:
    - get: locks
    - get: product
      resource: harbor
      passed:
      - deploy-harbor
      trigger: true
      params:
        skip_download: "true"
  - put: locks
    params:
      release: locks
- name: unset-lock
  plan:
  - get: locks
  - put: locks
    params:
      release: locks
