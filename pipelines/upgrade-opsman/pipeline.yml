resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource

resources:
- name: git-repo
  type: git
  source:
    uri: ((git_url))
    branch: ((git_branch))
    username: ((git_username))
    password: ((git_token))

- name: platform-automation-image
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: ops-manager
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ((opsman_product_version))

- name: platform-automation-tasks
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: email
  type: email
  source:
    smtp:
      host: ((smtp_address))
      port: ((smtp_port))
      username: ((smtp_username))
      password: ((smtp_password))
    from: ((from_address))
    to: [((to_addresses))]

create-yml: &create-yml
  image: platform-automation-image
  file: git-repo/tasks/create-yml-file/task.yml

create-opsman-env: &create-opsman-env
  image: platform-automation-image
  file: git-repo/tasks/create-yml-file/task.yml
  output_mapping:
    output-folder: env
  params:
    DEBUG: ((debug))
    OUTPUT_FILE_NAME: ((opsman_env_filename))
    PARAM_NAME: ((ops_manager_env))

jobs:
- name: upgrade-ops-manager
  plan:
  - aggregate:
    - get: git-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: pivnet-product
      resource: ops-manager
      trigger: true
      params:
        globs:
        - ((opsman_glob))
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true

  - task: create-opsman-import-file
    <<: *create-yml
    output_mapping:
      output-folder: config
    params:
      DEBUG: ((debug))
      OUTPUT_FILE_NAME: opsman.yml
      PARAM_NAME: ((ops_manager_settings))

  - task: create-opsman-env-file
    <<: *create-opsman-env

  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env_filename))

  - task: upgrade-opsmanager
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      config: config
      env: env
      image: pivnet-product
      state: git-repo
      installation: installation
    params:
      ENV_FILE: ((opsman_env_filename))
      STATE_FILE: ((state_file_destination))/((state_file_name))

  - task: commit-files-into-git
    image: platform-automation-image
    file: platform-automation-tasks/tasks/make-git-commit.yml
    input_mapping:
      repository: git-repo
      file-source: generated-state
    params:
      FILE_SOURCE_PATH: ((state_file_name))
      FILE_DESTINATION_PATH: ((state_file_destination))/((state_file_name))
      GIT_AUTHOR_NAME: ((ci_username))
      GIT_AUTHOR_EMAIL: ((ci_email_address))
      COMMIT_MESSAGE: "Updated state file after deleting the OpsManager VM"

  - put: git-repo
    params:
      repository: repository-commit

  - task: apply-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env_filename))

  - put: email
    params:
      subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_NAME}"
      body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
